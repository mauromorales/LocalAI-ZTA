#cloud-config

hostname: "LocalAI"

install:
  auto: true
  reboot: true
  device: auto
  grub_options:
    default_menu_entry: "LocalAI"

bind_mounts:
  - /usr/local/.state/opt-local-ai-models.bind:/opt/local-ai/models
  - /usr/local/.state/opt-local-ai-backends.bind:/opt/local-ai/backends

bundles:
  - targets:
      - run://quay.io/kairos/community-bundles:kairos-operator_latest
      - run://quay.io/kairos/community-bundles:k9s_latest
      - run://quay.io/kairos/community-bundles:ingress-nginx_latest

users:
  - name: "admin"
    passwd: "admin"
    groups: ["admin"]

k0s:
  enabled: true
  args:
    - --enable-worker
    - --no-taints

stages:
  initramfs:
    - name: "Enable mDNS services to advertise hostname on local network"
      systemctl:
        enable:
          - avahi-daemon
    - name: "Generate k0s kubeconfig script"
      files:
        - path: /usr/local/bin/k0s-kubeconfig
          permissions: 0755
          owner: 0
          group: 0
          content: |
            #!/bin/sh
            echo "Checking if admin.conf exists and is not empty..."
            if [ ! -f "/var/lib/k0s/pki/admin.conf" ] || [ ! -s "/var/lib/k0s/pki/admin.conf" ]; then
              echo "Error: admin config '/var/lib/k0s/pki/admin.conf' not found or empty, check if the control plane is initialized on this node"
              exit 1
            fi
            echo "admin.conf found, proceeding with kubeconfig generation..."
            
            k0s kubeconfig admin > /etc/k0s/kubeconfig.yaml
            echo "/etc/k0s/kubeconfig.yaml generated, saving to root's .bashrc and external storage..."

            if ! grep -q '^export KUBECONFIG="/etc/k0s/kubeconfig.yaml"' /root/.bashrc 2>/dev/null; then
              echo "KUBECONFIG not found in root's .bashrc, adding it..."
              printf '\nexport KUBECONFIG="/etc/k0s/kubeconfig.yaml"\n' >> /root/.bashrc
            else
              echo "KUBECONFIG found in root's .bashrc, no need to add it"
            fi

    - name: "Watch for k0s admin.conf changes"
      files:
        - path: /etc/systemd/system/k0s-kubeconfig.path
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Watch for k0s admin.conf

            [Path]
            PathChanged=/var/lib/k0s/pki/admin.conf
            PathExists=/var/lib/k0s/pki/admin.conf

            [Install]
            WantedBy=multi-user.target
    - name: "Call k0s-kubeconfig script on k0s admin.conf changes"
      files:
        - path: /etc/systemd/system/k0s-kubeconfig.service
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Generate k0s kubeconfig
            After=k0scontroller.service

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            ExecStart=/usr/local/bin/k0s-kubeconfig
            Restart=on-failure
            RestartSec=30s
            StartLimitInterval=300s
            StartLimitBurst=10

            [Install]
            WantedBy=multi-user.target

    - name: "Enable k0s kubeconfig related units"
      commands:
        - ln -sf /etc/systemd/system/k0s-kubeconfig.path /etc/systemd/system/multi-user.target.wants/k0s-kubeconfig.path
        - ln -sf /etc/systemd/system/k0s-kubeconfig.service /etc/systemd/system/multi-user.target.wants/k0s-kubeconfig.service
    - name: "Generate k0s one-time restart script"
      files:
        - path: /usr/local/bin/k0s-restart-once
          permissions: 0755
          owner: 0
          group: 0
          content: |
            #!/bin/sh
            SENTINEL_FILE="/var/lib/k0s/.restart-completed"
            
            echo "Checking if one-time restart has already been performed..."
            if [ -f "$SENTINEL_FILE" ]; then
              echo "One-time restart already completed (sentinel file exists), skipping..."
              exit 0
            fi
            
            echo "Checking if k0scontroller is running and ready..."
            if ! systemctl is-active --quiet k0scontroller; then
              echo "k0scontroller is not active, will retry..."
              exit 1
            fi
            
            echo "k0scontroller is active, checking if it's ready..."
            # Wait a bit for k0scontroller to fully initialize
            sleep 10
            
            # Check if k0s is responding
            if ! k0s status >/dev/null 2>&1; then
              echo "k0s is not responding yet, will retry..."
              exit 1
            fi
            
            echo "k0scontroller is ready, performing one-time restart..."
            
            # Create sentinel file to prevent future restarts
            mkdir -p "$(dirname "$SENTINEL_FILE")"
            touch "$SENTINEL_FILE"
            echo "Sentinel file created: $SENTINEL_FILE"
            
            # Restart k0scontroller service
            echo "Restarting k0scontroller service..."
            systemctl restart k0scontroller
            echo "k0scontroller service restarted successfully"
    - name: "Watch for k0scontroller service changes"
      files:
        - path: /etc/systemd/system/k0s-restart-once.path
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Watch for k0scontroller service changes

            [Path]
            PathExists=/var/lib/k0s/pki/admin.conf

            [Install]
            WantedBy=multi-user.target
    - name: "Call k0s-restart-once script on k0scontroller readiness"
      files:
        - path: /etc/systemd/system/k0s-restart-once.service
          permissions: 0644
          owner: 0
          group: 0
          content: |
            [Unit]
            Description=Perform one-time k0scontroller restart
            After=k0scontroller.service

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            ExecStart=/usr/local/bin/k0s-restart-once
            Restart=on-failure
            RestartSec=30s
            StartLimitInterval=300s
            StartLimitBurst=10

            [Install]
            WantedBy=multi-user.target
    - name: "Enable k0s one-time restart related units"
      commands:
        - ln -sf /etc/systemd/system/k0s-restart-once.path /etc/systemd/system/multi-user.target.wants/k0s-restart-once.path
        - ln -sf /etc/systemd/system/k0s-restart-once.service /etc/systemd/system/multi-user.target.wants/k0s-restart-once.service
    - name: "Configure NGINX Ingress Controller Admission"
      files:
        - path: /var/lib/k0s/manifests/ingress-nginx/deployment.yaml
          permissions: 0655
          owner: 0
          group: 0
          content: |
            apiVersion: v1
            kind: Namespace
            metadata:
              labels:
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
              name: ingress-nginx
            ---
            apiVersion: v1
            automountServiceAccountToken: true
            kind: ServiceAccount
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx
              namespace: ingress-nginx
            ---
            apiVersion: v1
            automountServiceAccountToken: true
            kind: ServiceAccount
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
              namespace: ingress-nginx
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx
              namespace: ingress-nginx
            rules:
            - apiGroups:
              - ""
              resources:
              - namespaces
              verbs:
              - get
            - apiGroups:
              - ""
              resources:
              - configmaps
              - pods
              - secrets
              - endpoints
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - ""
              resources:
              - services
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingresses
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingresses/status
              verbs:
              - update
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingressclasses
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - coordination.k8s.io
              resourceNames:
              - ingress-nginx-leader
              resources:
              - leases
              verbs:
              - get
              - update
            - apiGroups:
              - coordination.k8s.io
              resources:
              - leases
              verbs:
              - create
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - discovery.k8s.io
              resources:
              - endpointslices
              verbs:
              - list
              - watch
              - get
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
              namespace: ingress-nginx
            rules:
            - apiGroups:
              - ""
              resources:
              - secrets
              verbs:
              - get
              - create
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx
            rules:
            - apiGroups:
              - ""
              resources:
              - configmaps
              - endpoints
              - nodes
              - pods
              - secrets
              - namespaces
              verbs:
              - list
              - watch
            - apiGroups:
              - coordination.k8s.io
              resources:
              - leases
              verbs:
              - list
              - watch
            - apiGroups:
              - ""
              resources:
              - nodes
              verbs:
              - get
            - apiGroups:
              - ""
              resources:
              - services
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingresses
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingresses/status
              verbs:
              - update
            - apiGroups:
              - networking.k8s.io
              resources:
              - ingressclasses
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - discovery.k8s.io
              resources:
              - endpointslices
              verbs:
              - list
              - watch
              - get
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
            rules:
            - apiGroups:
              - admissionregistration.k8s.io
              resources:
              - validatingwebhookconfigurations
              verbs:
              - get
              - update
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx
              namespace: ingress-nginx
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: ingress-nginx
            subjects:
            - kind: ServiceAccount
              name: ingress-nginx
              namespace: ingress-nginx
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
              namespace: ingress-nginx
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: ingress-nginx-admission
            subjects:
            - kind: ServiceAccount
              name: ingress-nginx-admission
              namespace: ingress-nginx
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              labels:
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: ingress-nginx
            subjects:
            - kind: ServiceAccount
              name: ingress-nginx
              namespace: ingress-nginx
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: ingress-nginx-admission
            subjects:
            - kind: ServiceAccount
              name: ingress-nginx-admission
              namespace: ingress-nginx
            ---
            apiVersion: v1
            data: null
            kind: ConfigMap
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-controller
              namespace: ingress-nginx
            ---
            apiVersion: v1
            kind: Service
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-controller
              namespace: ingress-nginx
            spec:
              externalTrafficPolicy: Local
              ipFamilies:
              - IPv4
              ipFamilyPolicy: SingleStack
              ports:
              - appProtocol: http
                name: http
                port: 80
                protocol: TCP
                targetPort: http
              - appProtocol: https
                name: https
                port: 443
                protocol: TCP
                targetPort: https
              selector:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
              type: LoadBalancer
            ---
            apiVersion: v1
            kind: Service
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-controller-admission
              namespace: ingress-nginx
            spec:
              ports:
              - appProtocol: https
                name: https-webhook
                port: 443
                targetPort: webhook
              selector:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
              type: ClusterIP
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-controller
              namespace: ingress-nginx
            spec:
              minReadySeconds: 0
              revisionHistoryLimit: 10
              selector:
                matchLabels:
                  app.kubernetes.io/component: controller
                  app.kubernetes.io/instance: ingress-nginx
                  app.kubernetes.io/name: ingress-nginx
              strategy:
                rollingUpdate:
                  maxUnavailable: 1
                type: RollingUpdate
              template:
                metadata:
                  labels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: ingress-nginx
                    app.kubernetes.io/name: ingress-nginx
                    app.kubernetes.io/part-of: ingress-nginx
                    app.kubernetes.io/version: 1.13.3
                spec:
                  automountServiceAccountToken: true
                  containers:
                  - args:
                    - /nginx-ingress-controller
                    - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
                    - --election-id=ingress-nginx-leader
                    - --controller-class=k8s.io/ingress-nginx
                    - --ingress-class=nginx
                    - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
                    - --validating-webhook=:8443
                    - --validating-webhook-certificate=/usr/local/certificates/cert
                    - --validating-webhook-key=/usr/local/certificates/key
                    env:
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: LD_PRELOAD
                      value: /usr/local/lib/libmimalloc.so
                    image: registry.k8s.io/ingress-nginx/controller:v1.13.3@sha256:1b044f6dcac3afbb59e05d98463f1dec6f3d3fb99940bc12ca5d80270358e3bd
                    imagePullPolicy: IfNotPresent
                    lifecycle:
                      preStop:
                        exec:
                          command:
                          - /wait-shutdown
                    livenessProbe:
                      failureThreshold: 5
                      httpGet:
                        path: /healthz
                        port: 10254
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    name: controller
                    ports:
                    - containerPort: 80
                      hostPort: 80
                      name: http
                      protocol: TCP
                    - containerPort: 443
                      hostPort: 443
                      name: https
                      protocol: TCP
                    - containerPort: 8443
                      name: webhook
                      protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /healthz
                        port: 10254
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    resources:
                      requests:
                        cpu: 100m
                        memory: 90Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        add:
                        - NET_BIND_SERVICE
                        drop:
                        - ALL
                      readOnlyRootFilesystem: false
                      runAsGroup: 82
                      runAsNonRoot: true
                      runAsUser: 101
                      seccompProfile:
                        type: RuntimeDefault
                    volumeMounts:
                    - mountPath: /usr/local/certificates/
                      name: webhook-cert
                      readOnly: true
                  dnsPolicy: ClusterFirst
                  nodeSelector:
                    kubernetes.io/os: linux
                  serviceAccountName: ingress-nginx
                  terminationGracePeriodSeconds: 300
                  volumes:
                  - name: webhook-cert
                    secret:
                      secretName: ingress-nginx-admission
            ---
            apiVersion: batch/v1
            kind: Job
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission-create
              namespace: ingress-nginx
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/component: admission-webhook
                    app.kubernetes.io/instance: ingress-nginx
                    app.kubernetes.io/name: ingress-nginx
                    app.kubernetes.io/part-of: ingress-nginx
                    app.kubernetes.io/version: 1.13.3
                  name: ingress-nginx-admission-create
                spec:
                  automountServiceAccountToken: true
                  containers:
                  - args:
                    - create
                    - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
                    - --namespace=$(POD_NAMESPACE)
                    - --secret-name=ingress-nginx-admission
                    env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.6.3@sha256:3d671cf20a35cd94efc5dcd484970779eb21e7938c98fbc3673693b8a117cf39
                    imagePullPolicy: IfNotPresent
                    name: create
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - ALL
                      readOnlyRootFilesystem: true
                      runAsGroup: 65532
                      runAsNonRoot: true
                      runAsUser: 65532
                      seccompProfile:
                        type: RuntimeDefault
                  nodeSelector:
                    kubernetes.io/os: linux
                  restartPolicy: OnFailure
                  serviceAccountName: ingress-nginx-admission
              ttlSecondsAfterFinished: 0
            ---
            apiVersion: batch/v1
            kind: Job
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission-patch
              namespace: ingress-nginx
            spec:
              template:
                metadata:
                  labels:
                    app.kubernetes.io/component: admission-webhook
                    app.kubernetes.io/instance: ingress-nginx
                    app.kubernetes.io/name: ingress-nginx
                    app.kubernetes.io/part-of: ingress-nginx
                    app.kubernetes.io/version: 1.13.3
                  name: ingress-nginx-admission-patch
                spec:
                  automountServiceAccountToken: true
                  containers:
                  - args:
                    - patch
                    - --webhook-name=ingress-nginx-admission
                    - --namespace=$(POD_NAMESPACE)
                    - --patch-mutating=false
                    - --secret-name=ingress-nginx-admission
                    - --patch-failure-policy=Fail
                    env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.6.3@sha256:3d671cf20a35cd94efc5dcd484970779eb21e7938c98fbc3673693b8a117cf39
                    imagePullPolicy: IfNotPresent
                    name: patch
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - ALL
                      readOnlyRootFilesystem: true
                      runAsGroup: 65532
                      runAsNonRoot: true
                      runAsUser: 65532
                      seccompProfile:
                        type: RuntimeDefault
                  nodeSelector:
                    kubernetes.io/os: linux
                  restartPolicy: OnFailure
                  serviceAccountName: ingress-nginx-admission
              ttlSecondsAfterFinished: 0
            ---
            apiVersion: networking.k8s.io/v1
            kind: IngressClass
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: nginx
            spec:
              controller: k8s.io/ingress-nginx
            ---
            apiVersion: admissionregistration.k8s.io/v1
            kind: ValidatingWebhookConfiguration
            metadata:
              labels:
                app.kubernetes.io/component: admission-webhook
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
                app.kubernetes.io/version: 1.13.3
              name: ingress-nginx-admission
            webhooks:
            - admissionReviewVersions:
              - v1
              clientConfig:
                service:
                  name: ingress-nginx-controller-admission
                  namespace: ingress-nginx
                  path: /networking/v1/ingresses
                  port: 443
              failurePolicy: Fail
              matchPolicy: Equivalent
              name: validate.nginx.ingress.kubernetes.io
              rules:
              - apiGroups:
                - networking.k8s.io
                apiVersions:
                - v1
                operations:
                - CREATE
                - UPDATE
                resources:
                - ingresses
              sideEffects: None
    - name: "Configure NGINX Ingress Controller"
      files:
        - path: /var/lib/k0s/manifests/ingress-nginx/ingress-nginx-service.yaml
          permissions: 0655
          owner: 0
          group: 0
          content: |
            apiVersion: v1
            kind: Service
            metadata:
              name: ingress-nginx-controller
              namespace: ingress-nginx
            spec:
              type: ClusterIP
              ports:
                - name: http
                  port: 8080
                  targetPort: 80
                  protocol: TCP
                - name: https
                  port: 8443
                  targetPort: 443
                  protocol: TCP
              selector:
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/component: controller
    - name: "Add local-path-provisioner"
      files:
        - path: /var/lib/k0s/manifests/local-path-provisioner/local-path-storage.yaml
          permissions: 0655
          owner: 0
          group: 0
          # from https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
          content: |
            apiVersion: v1
            kind: Namespace
            metadata:
              name: local-path-storage

            ---
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: local-path-provisioner-service-account
              namespace: local-path-storage

            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              name: local-path-provisioner-role
              namespace: local-path-storage
            rules:
              - apiGroups: [""]
                resources: ["pods"]
                verbs: ["get", "list", "watch", "create", "patch", "update", "delete"]

            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: local-path-provisioner-role
            rules:
              - apiGroups: [""]
                resources: ["nodes", "persistentvolumeclaims", "configmaps", "pods", "pods/log"]
                verbs: ["get", "list", "watch"]
              - apiGroups: [""]
                resources: ["persistentvolumes"]
                verbs: ["get", "list", "watch", "create", "patch", "update", "delete"]
              - apiGroups: [""]
                resources: ["events"]
                verbs: ["create", "patch"]
              - apiGroups: ["storage.k8s.io"]
                resources: ["storageclasses"]
                verbs: ["get", "list", "watch"]

            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: local-path-provisioner-bind
              namespace: local-path-storage
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: local-path-provisioner-role
            subjects:
              - kind: ServiceAccount
                name: local-path-provisioner-service-account
                namespace: local-path-storage

            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: local-path-provisioner-bind
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: local-path-provisioner-role
            subjects:
              - kind: ServiceAccount
                name: local-path-provisioner-service-account
                namespace: local-path-storage

            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: local-path-provisioner
              namespace: local-path-storage
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: local-path-provisioner
              template:
                metadata:
                  labels:
                    app: local-path-provisioner
                spec:
                  serviceAccountName: local-path-provisioner-service-account
                  containers:
                    - name: local-path-provisioner
                      image: rancher/local-path-provisioner:v0.0.32
                      imagePullPolicy: IfNotPresent
                      command:
                        - local-path-provisioner
                        - --debug
                        - start
                        - --config
                        - /etc/config/config.json
                      volumeMounts:
                        - name: config-volume
                          mountPath: /etc/config/
                      env:
                        - name: POD_NAMESPACE
                          valueFrom:
                            fieldRef:
                              fieldPath: metadata.namespace
                        - name: CONFIG_MOUNT_PATH
                          value: /etc/config/
                  volumes:
                    - name: config-volume
                      configMap:
                        name: local-path-config

            ---
            apiVersion: storage.k8s.io/v1
            kind: StorageClass
            metadata:
              name: local-path
            provisioner: rancher.io/local-path
            volumeBindingMode: WaitForFirstConsumer
            reclaimPolicy: Delete

            ---
            kind: ConfigMap
            apiVersion: v1
            metadata:
              name: local-path-config
              namespace: local-path-storage
            data:
              config.json: |-
                {
                        "nodePathMap":[
                        {
                                "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                                "paths":["/opt/local-path-provisioner"]
                        }
                        ]
                }
              setup: |-
                #!/bin/sh
                set -eu
                mkdir -m 0777 -p "$VOL_DIR"
              teardown: |-
                #!/bin/sh
                set -eu
                rm -rf "$VOL_DIR"
              helperPod.yaml: |-
                apiVersion: v1
                kind: Pod
                metadata:
                  name: helper-pod
                spec:
                  priorityClassName: system-node-critical
                  tolerations:
                    - key: node.kubernetes.io/disk-pressure
                      operator: Exists
                      effect: NoSchedule
                  containers:
                  - name: helper-pod
                    image: busybox
                    imagePullPolicy: IfNotPresent
    - name: "Create LocalAI storage directories"
      commands:
        - mkdir -p /opt/local-ai/models
        - mkdir -p /opt/local-ai/backends
        - chmod 755 /opt/local-ai/models
        - chmod 755 /opt/local-ai/backends
    - name: "Add LocalAI static Persistent Volumes"
      files:
        - path: /var/lib/k0s/manifests/local-ai/persistent-volumes.yaml
          permissions: 0655
          owner: 0
          group: 0
          content: |
            apiVersion: v1
            kind: PersistentVolume
            metadata:
              name: local-ai-models-pv
            spec:
              capacity:
                storage: 5Gi
              accessModes:
                - ReadWriteOnce
              persistentVolumeReclaimPolicy: Retain
              hostPath:
                path: /opt/local-ai/models
            ---
            apiVersion: v1
            kind: PersistentVolume
            metadata:
              name: local-ai-backends-pv
            spec:
              capacity:
                storage: 2Gi
              accessModes:
                - ReadWriteOnce
              persistentVolumeReclaimPolicy: Retain
              hostPath:
                path: /opt/local-ai/backends
    - name: "Add LocalAI deployment"
      files:
        - path: /var/lib/k0s/manifests/local-ai/deployment.yaml
          permissions: 0655
          owner: 0
          group: 0
          # from https://raw.githubusercontent.com/mudler/LocalAI-examples/refs/heads/main/kubernetes/deployment.yaml
          content: |
            apiVersion: v1
            kind: Namespace
            metadata:
              name: local-ai
            ---
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: models-pvc
              namespace: local-ai
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 5Gi
              volumeName: local-ai-models-pv
            ---
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: backends-pvc
              namespace: local-ai
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 2Gi
              volumeName: local-ai-backends-pv
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: local-ai
              namespace: local-ai
              labels:
                app: local-ai
            spec:
              selector:
                matchLabels:
                  app: local-ai
              replicas: 1
              template:
                metadata:
                  labels:
                    app: local-ai
                  name: local-ai
                spec:
                  containers:
                    - args:
                      - phi-2
                      env:
                      - name: DEBUG
                        value: "true"
                      name: local-ai
                      image: quay.io/go-skynet/local-ai:master
                      imagePullPolicy: IfNotPresent
                      volumeMounts:
                        - name: models-volume
                          mountPath: /models
                        - name: backends-volume
                          mountPath: /backends
                  volumes:
                    - name: models-volume
                      persistentVolumeClaim:
                        claimName: models-pvc
                    - name: backends-volume
                      persistentVolumeClaim:
                        claimName: backends-pvc
            ---
            apiVersion: v1
            kind: Service
            metadata:
              name: local-ai
              namespace: local-ai
            spec:
              selector:
                app: local-ai
              type: ClusterIP
              ports:
                - protocol: TCP
                  port: 8080
                  targetPort: 8080
            ---
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: local-ai-ingress
              namespace: local-ai
              annotations:
                kubernetes.io/ingress.class: "nginx"
                nginx.ingress.kubernetes.io/rewrite-target: /
                nginx.ingress.kubernetes.io/proxy-body-size: "0"
                nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
                nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
                nginx.ingress.kubernetes.io/server-alias: "localai.local"
            spec:
              ingressClassName: nginx
              rules:
                - host: localai.local
                  http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: local-ai
                            port:
                              number: 8080

  rootfs:
    - name: "LocalAI persistent mounts"
      environment_file: /run/cos/cos-layout.env
      environment:
        CUSTOM_BIND_MOUNTS: "/opt/local-ai/models /opt/local-ai/backends"

  after-install:
    - name: "Copy LocalAI data to persistent partition"
      commands:
        - |
          if mount | grep /usr/local >/dev/null; then umount /usr/local; fi
          mount LABEL=COS_PERSISTENT /usr/local || mount $(findfs LABEL=COS_PERSISTENT) /usr/local
          mkdir -p /usr/local/.state/opt-local-ai-models.bind
          mkdir -p /usr/local/.state/opt-local-ai-backends.bind
          [ -d /run/initramfs/live/opt/local-ai/models ] && \
            cp -rf /run/initramfs/live/opt/local-ai/models/* \
                   /usr/local/.state/opt-local-ai-models.bind/
          [ -d /run/initramfs/live/opt/local-ai/backends ] && \
            cp -rf /run/initramfs/live/opt/local-ai/backends/* \
                   /usr/local/.state/opt-local-ai-backends.bind/
          umount /usr/local